/*
 * Proddx API
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * API version: 0.1.0
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */
package router

import (
	"fmt"
	"net/http"

	"api.proddx.com/storage"
	"api.proddx.com/tokens"
	"github.com/julienschmidt/httprouter"
)

func New(us storage.User, cs storage.Company, ps storage.Product, rs storage.Review) *httprouter.Router {
	router := httprouter.New()

	router.Handler(http.MethodGet, "/", Logger(Index(), "Index"))

	router.Handler(http.MethodPost, "/login", Logger(login(us), "LoginUser"))
	router.Handler(http.MethodPost, "/register", Logger(register(us, cs), "RegisterUser"))

	router.Handler(http.MethodGet, "/companies", Logger(tokens.Validation(listCompanies(cs)), "ListCompanies"))
	router.Handler(http.MethodPost, "/companies", Logger(tokens.Validation(insertCompany(cs)), "InsertCompany"))
	router.Handler(http.MethodGet, "/companies/:id", Logger(tokens.Validation(findCompany(cs)), "FindCompany"))
	router.Handler(http.MethodPut, "/companies/:id", Logger(tokens.Validation(updateCompany(cs)), "UpdateCompany"))
	router.Handler(http.MethodDelete, "/companies/:id", Logger(tokens.Validation(deleteCompany(cs)), "DeleteCompany"))

	router.Handler(http.MethodGet, "/products", Logger(tokens.Validation(listProducts(ps)), "ListProducts"))
	router.Handler(http.MethodPost, "/products", Logger(tokens.Validation(insertProduct(ps)), "InsertProduct"))
	router.Handler(http.MethodGet, "/products/:id", Logger(findProduct(ps), "FindProduct"))
	router.Handler(http.MethodPut, "/products/:id", Logger(tokens.Validation(updateProduct(ps)), "UpdateProduct"))
	router.Handler(http.MethodDelete, "/products/:id", Logger(tokens.Validation(deleteProduct(ps)), "DeleteProduct"))

	router.Handler(http.MethodGet, "/reviews", Logger(tokens.Validation(listReviews(rs)), "ListReviews"))
	router.Handler(http.MethodPost, "/reviews", Logger(insertReview(rs), "InsertReview"))
	router.Handler(http.MethodGet, "/reviews/:id", Logger(tokens.Validation(findReview(rs)), "FindReview"))
	router.Handler(http.MethodPut, "/reviews/:id", Logger(tokens.Validation(updateReview(rs)), "UpdateReview"))
	router.Handler(http.MethodDelete, "/reviews/:id", Logger(tokens.Validation(deleteReview(rs)), "DeleteReview"))

	return router
}

func Index() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		fmt.Fprintf(w, "Hello World!")
	}
}
